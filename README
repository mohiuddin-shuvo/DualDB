DualDB: An LSM based key-value store on top of leveldb to Support High-Throughput and Dynamic Publish/Subscribe System.
Authors: Mohiuddin Abdul Qader (mabdu002@cs.ucr.edu)
leveldb version: 1.14.0

This implementation stores the list of publications and subscriptions in the same key-space of the LSM storage ststem. Both Subscription and Publication Record is assumed to be a JSON object containing the following three attributes:

Tmin : The Time predicate for Subscription on Historic Data
Tmax : The expiry time for Subscription/Publication
Tnow : Execution time of a Publication and Subscription

The Public APIs:

1. static Status Open(const Options& options, const std::string& name, DB** dbptr);

This API creates/open a database. 

Simple Subscriptions APIs for Fixed Granular Pub/Sub: 

2. Status Publish(const WriteOptions& options, const Slice& ID, const Slice& publication, std::vector<std::string>& subscribers);

This API write Publication to DualDB with ID as primary key and return the list of matching and valid Subscribers who subscribed for this ID (i.e. topic/region) from DualDB Subscription Storage. 

3. Status Status Subscribe(const ReadOptions& options, const Slice& ID, const Slice& subscription, std::vector<std::string>& publications);

This API write the Subscription in DualDB Subscription Storage with $ID$ as primary key and return the list of matching and valid historic/past publications from DualDB Publication storage those had been published within [Tmin, Tmax] time interval defined as attirbutes of Json records.


Simple Subscriptions APIs for Multi Granular Pub/Sub on Hierarchical Arrtibutes: 

4. Status PublishInDewey(const WriteOptions& options, const Slice& ID, const Slice& publication, std::vector<std::string>& subscribers);

This API performs similarly as Publish operation, but it assumes the Subscription and Publication ID's are represented as Dewey Encoded to efficiently support high granular hierarchical key space. 

5. Status Status SubscribeInDewey(const ReadOptions& options, const Slice& ID, const Slice& subscription, std::vector<std::string>& publications);

This API performs similarly as Subscribe operation, but it assumes the Subscription and Publication ID's are represented as Dewey Encoded to efficiently support high granular hierarchical key space. 


Self-Joining Subscriptions APIs for Fixed Granular Pub/Sub: 

6. Status  PublishAndSelfJoin(const WriteOptions& options, const Slice& ID, const Slice& publication, std::vector<std::string>& subscribers, std::vector<std::string>& pastPublications) = 0;

This API performs Self-joining Publication operation where it also return matching list of past publications.


7. Status SubscribeAndSelfJoin(const WriteOptions& options, const Slice& ID, const Slice& publication, std::vector<std::string>& subscribers, std::vector<std::string>& pastPublications) = 0;

This API performs Self-joining Subscription operation where it also return matching list of past publications.


Implementation Details of original LevelDB:

See doc/index.html for more explanation on original leveldb.
See doc/impl.html for a brief overview of the implementation of original leveldb.
See doc/Header files.txt for the guide to header files.
